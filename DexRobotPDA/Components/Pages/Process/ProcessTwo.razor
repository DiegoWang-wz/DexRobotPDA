@page "/process_2"

@inject TaskService TaskService
@inject ProcessTwoService ProcessTwoService
@inject IJSRuntime JSRuntime
@inject BarcodeScannerService ScannerService
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using DexRobotPDA.Components.Pages.Detection
@implements IAsyncDisposable

<MudPaper Elevation="3" Class="pa-4 ma-2 mx-md-20 my-md-4">
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="taskId"
            Label="生产单号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            AutoFocus="true"
            ErrorText="请输入生产单号"
            Id="taskId"
            @onfocus="() => HandleSpecialInputFocus()"
            @onblur="() => HandleSpecialInputBlur()"
            Class="flex-1"/>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearTaskId"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            OnClick="LoadTaskDetail"
            Disabled="isLoading"
            Size="Size.Large"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>

    <MudDivider Class="my-4"/>
    <div class="min-vh-40 d-flex flex-column justify-center">
        @if (!hasSearched)
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                请输入生产单号并点击查询，加载任务详情
            </MudText>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            </div>
        }
        else if (task == null)
        {
            <div class="d-flex justify-content-center align-items-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Medium" Class="mr-3"/>
                <MudText Typo="Typo.body1" Color="Color.Error">
                    无法加载任务数据，请检查生产单号是否正确
                </MudText>
            </div>
        }
        else
        {
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudText Typo="Typo.h6">任务明细</MudText>
                            <MudSpacer/>
                            @if (task.status == 1)
                            {
                                <MudChip T="string" Color="Color.Info">进行中</MudChip>
                            }
                            else if (task.status == 2)
                            {
                                <MudChip T="string" Color="Color.Success">已完成</MudChip>
                            }
                            else if (task.status == 3)
                            {
                                <MudChip T="string" Color="Color.Error">已取消</MudChip>
                            }
                            else
                            {
                                <MudChip T="string">未开始</MudChip>
                            }
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <div  class="d-flex flex-column flex-md-row w-100">
                            <MudPaper Width="360px" Class="my-2 mx-1">
                                <MudList T="string">
                                    <MudListItem Text="@($"任务标题：{task.title ?? ""}")" Icon="@Icons.Material.Filled.Subtitles"/>
                                    <MudListItem Text="@($"任务描述：{task.description ?? ""}")" Icon="@Icons.Material.Filled.Dehaze"/>
                                    <MudListItem Text="@($"优先级：{(task.priority == 1 ? "低" : task.priority == 2 ? "中" : task.priority == 3 ? "高" : "")}")" Icon="@Icons.Material.Filled.PriorityHigh"/>
                                </MudList>
                            </MudPaper>
                            <MudPaper Width="360px" Class="my-2 mx-1">
                                <MudList T="string">
                                    <MudListItem Text="@($"负责人：{task.assignee_id ?? ""}")" Icon="@Icons.Material.Filled.ManageAccounts"/>
                                    <MudListItem Text="@($"创建日期：{task.created_at.ToString("yyyy-MM-dd HH:mm:ss") ?? ""}")" Icon="@Icons.Material.Filled.CalendarMonth"/>
                                    <MudListItem Text="@($"更新日期：{task.updated_at.ToString("yyyy-MM-dd HH:mm:ss") ?? ""}")" Icon="@Icons.Material.Filled.EditCalendar"/>
                                </MudList>
                            </MudPaper>
                        </div>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <MudDivider Class="my-4"/>
            <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
                <MudButton
                    Variant="Variant.Outlined"
                    Color="@(ScannerService.IsAutoMode ? Color.Success : Color.Primary)"
                    OnClick="ToggleScanModeAsync"
                    Size="Size.Medium">
                    @(ScannerService.IsAutoMode ? "自动匹配模式" : "手动聚焦模式")
                    <MudIcon Icon="@(ScannerService.IsAutoMode ? Icons.Material.Filled.AutoAwesome : Icons.Material.Filled.Man)"
                             Class="ml-2"/>
                </MudButton>
                <MudSpacer/>
                <MudButton Variant=" Variant.Filled"  
                           Color="@(isThumbSelected ? Color.Warning : Color.Info)" 
                           OnClick="@(e => ToggleFingerType(!isThumbSelected))">
                    @(isThumbSelected ? "切换四指" : "切换大拇指")
                </MudButton>

                <MudDivider Vertical="true" Class="mx-4 my-auto" Style="height: 1em; align-self: center;"/>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary">
                    已绑定数量@(finishedFingers.Count)/5
                </MudButton>
            </MudStack>

            <!-- 集成条码扫描组件 -->
            <BarcodeScanner 
                Inputs="scannerInputs"
                DetermineTargetInput="DetermineTargetInput"
                OnInputValueChanged="HandleInputValueChanged"/>
            <MudDivider Class="my-4"/>
            <MudButton OnClick="HandleBinding" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary"
                       FullWidth="true" Disabled="@isBinding">
                @if (isBinding)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ml-2">绑定中...</MudText>
                }
                else
                {
                    <MudText>绑定</MudText>
                }
            </MudButton>
        }
    </div>
</MudPaper>

@code {
    private string taskId = string.Empty;
    private ProductTaskDto? task = null;
    private bool isLoading = false;
    private bool hasSearched = false;
    private bool hasInputError = false;
    private UserDto? currentUser;
    private List<FingerDto> finishedFingers = new List<FingerDto>();
    private MudForm form;
    private bool validation = true;
    private AddFingerDto _fingerDto = new AddFingerDto();
    private string _motorId1 { get; set; } = string.Empty;
    private string _motorId2 { get; set; } = string.Empty;
    private string _motorId3 { get; set; } = string.Empty;
    private DotNetObjectReference<ProcessTwo>? dotNetRef;
    private bool isThumbSelected = false; 
    private List<BarcodeScanner.InputField> scannerInputs = new();
    
    private async Task ToggleScanModeAsync()
    {
        await ScannerService.ToggleModeAsync();
        StateHasChanged(); // 刷新按钮显示状态
    }
    
    protected override async Task OnInitializedAsync()
    {
        // 初始化扫描器输入框
        scannerInputs = new List<BarcodeScanner.InputField>
        {
            // 手指编号 - 普通输入框，保持自动聚焦
            new BarcodeScanner.InputField 
            { 
                Index = 1, 
                Label = "手指编号", 
                Id = "fingerId", 
                IsSpecialInput = false 
            },
            // 电机1编号 - 普通输入框，保持自动聚焦
            new BarcodeScanner.InputField 
            { 
                Index = 2, 
                Label = "电机1编号", 
                Id = "motorId1", 
                IsSpecialInput = false 
            },
            // 电机2编号 - 普通输入框，保持自动聚焦
            new BarcodeScanner.InputField 
            { 
                Index = 3, 
                Label = "电机2编号", 
                Id = "motorId2", 
                IsSpecialInput = false 
            },
            // 电机3编号 - 普通输入框，保持自动聚焦
            new BarcodeScanner.InputField 
            { 
                Index = 4, 
                Label = "电机3编号(大拇指)", 
                Id = "motorId3", 
                IsSpecialInput = false ,
                Visible = false
            },
            // 备注 - 特殊输入框，点击会退出自动聚焦
            new BarcodeScanner.InputField 
            { 
                Index = 5, 
                Label = "备注", 
                Id = "remarks", 
                IsSpecialInput = true 
            }
        };
    }

    // 添加切换按钮的方法
    private void ToggleFingerType(bool isThumb)
    {
        isThumbSelected = isThumb;
        var motor3Input = scannerInputs.FirstOrDefault(i => i.Id == "motorId3");
        if (motor3Input != null)
        {
            motor3Input.Visible = isThumb;
        }
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.initialize", dotNetRef);
            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                }
                else
                {
                    _fingerDto.operator_id = currentUser.employee_id;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"加载用户信息失败: {ex.Message}");
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    // 处理特殊输入框（任务单号）的聚焦事件
    private void HandleSpecialInputFocus()
    {
        ScannerService.SetCurrentFocusedInputId("taskId");
        _ = ScannerService.ExitAutoFocusModeAsync();
    }
    
    // 处理特殊输入框（任务单号）的失焦事件
    private async Task HandleSpecialInputBlur()
    {
        if (ScannerService.IsAutoMode)
        {
            await ScannerService.EnterAutoFocusModeAsync();
        }
        await ScannerService.HandleInputBlurAsync();
    }

    private void ClearTaskId()
    {
        taskId = string.Empty;
        task = null;
        hasSearched = false;
        hasInputError = false;
        finishedFingers.Clear();
        _fingerDto = new AddFingerDto();
        
        // 清空扫描器输入框
        foreach (var input in scannerInputs)
        {
            input.Value = string.Empty;
        }
        
        _motorId1 = string.Empty;
        _motorId2 = string.Empty;
        _motorId3 = string.Empty;

        // 如果当前用户信息存在，重新设置操作员ID
        if (currentUser != null)
        {
            _fingerDto.operator_id = currentUser.employee_id;
        }

        StateHasChanged();
    }

    // [JSInvokable]
    // public async Task OnEnterKeyPressed()
    // {
    //     StateHasChanged();
    //     await Task.Delay(1);
    //     await LoadTaskDetail();
    // }

    private async Task LoadTaskDetail()
    {
        if (string.IsNullOrWhiteSpace(taskId))
        {
            hasInputError = true;
            StateHasChanged();
            return;
        }

        hasInputError = false;
        isLoading = true;
        StateHasChanged();
        try
        {
            hasSearched = true;
            StateHasChanged();
            task = await TaskService.GetTaskDetail(taskId);
            if (task == null)
            {
                SnackbarHelper.Show(Snackbar, "生产单号不存在", Severity.Warning);
            }
            _fingerDto.task_id = taskId;
            await GetFinishedList();
        }
        catch (Exception ex)
        {
            task = null;
            await DialogService.ShowMessageBox("错误", $"任务加载失败：{ex.Message}", "确定");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetFinishedList()
    {
        try
        {
            var result = await ProcessTwoService.GetFinishedList(taskId);
            finishedFingers = result;
        }
        catch (Exception ex)
        {
            finishedFingers = new List<FingerDto>();
            SnackbarHelper.Show(Snackbar,"加载失败", Severity.Error);
        }
    }

    private bool isBinding = false;

    private async Task HandleBinding()
    {
        // 从扫描器输入框获取值
        var fingerIdInput = scannerInputs.FirstOrDefault(i => i.Id == "fingerId");
        var motor1Input = scannerInputs.FirstOrDefault(i => i.Id == "motorId1");
        var motor2Input = scannerInputs.FirstOrDefault(i => i.Id == "motorId2");
        var motor3Input = scannerInputs.FirstOrDefault(i => i.Id == "motorId3");
        
        // 基本验证
        if (fingerIdInput == null || string.IsNullOrWhiteSpace(fingerIdInput.Value))
        {
            SnackbarHelper.Show(Snackbar,"请输入手指外壳编号", Severity.Warning);
            return;
        }

        if (motor1Input == null || string.IsNullOrWhiteSpace(motor1Input.Value))
        {
            SnackbarHelper.Show(Snackbar,"请输入电机1编号", Severity.Warning);
            return;
        }

        if (motor2Input == null || string.IsNullOrWhiteSpace(motor2Input.Value))
        {
            SnackbarHelper.Show(Snackbar,"请输入电机2编号", Severity.Warning);
            return;
        }

        isBinding = true;
        try
        {
            // 更新绑定数据
            _fingerDto.finger_id = fingerIdInput.Value;
            _fingerDto.remarks = scannerInputs.FirstOrDefault(i => i.Id == "remarks")?.Value ?? "";
            
            // 添加手指信息
            var response = await ProcessTwoService.AddFinger(_fingerDto);

            if (response.ResultCode != 1)
            {
                var errorMessage = response?.Msg ?? "绑定失败";
                SnackbarHelper.Show(Snackbar,errorMessage, Severity.Error);
                return;
            }

            // 绑定电机1
            ApiResponse response1 = await HandleMotorBindFinger(motor1Input.Value, _fingerDto.finger_id);
            if (response1?.ResultCode != 1)
            {
                return;
            }

            // 绑定电机2
            ApiResponse response2 = await HandleMotorBindFinger(motor2Input.Value, _fingerDto.finger_id);
            if (response2?.ResultCode != 1)
            {
                return;
            }

            // 如果是大拇指且电机3编号不为空，则绑定电机3
            if (isThumbSelected && motor3Input != null && !string.IsNullOrWhiteSpace(motor3Input.Value))
            {
                ApiResponse response3 = await HandleMotorBindFinger(motor3Input.Value, _fingerDto.finger_id);
                if (response3?.ResultCode != 1)
                {
                    return;
                }
            }

            // 清空输入框
            fingerIdInput.Value = "";
            motor1Input.Value = "";
            motor2Input.Value = "";
            if (motor3Input != null) motor3Input.Value = "";
            scannerInputs.FirstOrDefault(i => i.Id == "remarks").Value = "";
        }
        catch (Exception ex)
        {
            SnackbarHelper.Show(Snackbar,"绑定失败", Severity.Error);
        }
        finally
        {
            isBinding = false;
            await LoadTaskDetail();
        }
    }

    private async Task<ApiResponse> HandleMotorBindFinger(string motor_id, string finger_id)
    {
        ApiResponse response = null;
        try
        {
            response = await ProcessTwoService.MotorBindFinger(motor_id, finger_id);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar,$"电机{motor_id},绑定成功", Severity.Success);
            }
            else
            {
                var errorMessage = response?.Msg ?? $"电机{motor_id},绑定失败";
                SnackbarHelper.Show(Snackbar,errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            SnackbarHelper.Show(Snackbar,$"电机{motor_id},绑定失败", Severity.Error);
        }

        return response;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(taskId) || task == null)
        {
            SnackbarHelper.Show(Snackbar,"请先查询并加载有效的任务数据", Severity.Warning);
            return;
        }

        try
        {
            var response = await TaskService.UpdateTaskProcessStatus(taskId, "process2", 1);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar,"流程提交成功", Severity.Success);
                await LoadTaskDetail();
            }
            else
            {
                var errorMsg = response?.Msg ?? "提交失败，请重试";
                SnackbarHelper.Show(Snackbar,errorMsg, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            SnackbarHelper.Show(Snackbar,"系统异常，提交失败", Severity.Error);
        }
    }

    // 处理输入框值变化
    private async Task HandleInputValueChanged(BarcodeScanner.InputField input)
    {
        switch (input.Id)
        {
            case "fingerId":
                _fingerDto.finger_id = input.Value;
                break;
            case "motorId1":
                _motorId1 = input.Value;
                break;
            case "motorId2":
                _motorId2 = input.Value;
                break;
            case "motorId3":
                _motorId3 = input.Value;
                break;
            case "remarks":
                _fingerDto.remarks = input.Value;
                break;
        }
    }
    
    // 确定条码数据应填入哪个输入框
    private BarcodeScanner.InputField? DetermineTargetInput(string barcodeData)
    {
        var fingerInput = scannerInputs.FirstOrDefault(i => i.Id == "fingerId" && string.IsNullOrEmpty(i.Value));
        if (fingerInput != null) return fingerInput;
        
        var motor1Input = scannerInputs.FirstOrDefault(i => i.Id == "motorId1" && string.IsNullOrEmpty(i.Value));
        if (motor1Input != null) return motor1Input;
        
        var motor2Input = scannerInputs.FirstOrDefault(i => i.Id == "motorId2" && string.IsNullOrEmpty(i.Value));
        if (motor2Input != null) return motor2Input;
        
        // 如果是大拇指且电机3未填写，则填充电机3
        if (isThumbSelected)
        {
            var motor3Input = scannerInputs.FirstOrDefault(i => i.Id == "motorId3" && string.IsNullOrEmpty(i.Value));
            if (motor3Input != null) return motor3Input;
        }
        
        // 所有输入框都已填写，默认返回手指编号输入框
        return scannerInputs.FirstOrDefault(i => i.Id == "fingerId");
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.dispose");
            dotNetRef.Dispose();
        }

        GC.SuppressFinalize(this);
    }
}
