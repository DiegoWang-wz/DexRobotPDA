@page "/process_2"

@inject TaskService TaskService
@inject ProcessTwoService ProcessTwoService


<MudPaper Elevation="3" Class="pa-4 ma-2 mx-md-20 my-md-4">
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="taskId"
            Label="生产单号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入生产单号"
            Class="flex-1"/>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearTaskId"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            OnClick="LoadTaskDetail"
            Disabled="isLoading"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>

    <MudDivider Class="my-4"/>
    <div class="min-vh-40 d-flex flex-column justify-center">
        @if (!hasSearched)
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                请输入生产单号并点击查询，加载任务详情
            </MudText>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            </div>
        }
        else if (task == null)
        {
            <div class="d-flex justify-content-center align-items-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Medium" Class="mr-3"/>
                <MudText Typo="Typo.body1" Color="Color.Error">
                    无法加载任务数据，请检查生产单号是否正确
                </MudText>
            </div>
        }
        else
        {
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudText Typo="Typo.h6">任务明细 - @taskId</MudText>
                            <MudSpacer/>
                            @if (task.status == 1)
                            {
                                <MudChip T="string" Color="Color.Info">进行中</MudChip>
                            }
                            else if (task.status == 2)
                            {
                                <MudChip T="string" Color="Color.Success">已完成</MudChip>
                            }
                            else if (task.status == 3)
                            {
                                <MudChip T="string" Color="Color.Error">已取消</MudChip>
                            }
                            else
                            {
                                <MudChip T="string">未开始</MudChip>
                            }
                        </div>
                    </TitleContent>
                    <ChildContent>
                        Panel Content
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <MudDivider Class="my-4"/>
            <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
                <MudText Typo="Typo.h6">手指组装</MudText>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary">
                    已绑定数量@(finishedFingers.Count)/5
                </MudButton>
            </MudStack>

            <MudForm Model="@_fingerDto" @ref="form" Validation="@validation">
                <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                    <MudTextField
                        @bind-Value="_fingerDto.finger_id"
                        Label="手指编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_motorId1"
                        Label="电机1编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_motorId2"
                        Label="电机2编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_motorId3"
                        Label="电机3编号(大拇指)"
                        Variant="Variant.Outlined"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_fingerDto.remarks"
                        Label="备注"
                        Variant="Variant.Outlined"
                        Class="flex-1 mb-3"/>
                </MudFocusTrap>
                <MudButton OnClick="HandleBinding" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary"
                           FullWidth="true" Disabled="@isBinding">
                    @if (isBinding)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ml-2">绑定中...</MudText>
                    }
                    else
                    {
                        <MudText>绑定</MudText>
                    }
                </MudButton>
            </MudForm>
        }
    </div>
</MudPaper>

@code {
    private string taskId = string.Empty;
    private ProductTaskDto? task = null;
    private bool isLoading = false;
    private bool hasSearched = false;
    private bool hasInputError = false;
    private UserDto? currentUser;
    private List<FingerDto> finishedFingers = new List<FingerDto>();
    private MudForm form;
    private bool validation = true;
    private AddFingerDto _fingerDto = new AddFingerDto();
    private string _motorId1 { get; set; }
    private string _motorId2 { get; set; }
    private string _motorId3 { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();

            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                }
                else
                {
                    _fingerDto.operator_id = currentUser.employee_id;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"加载用户信息失败: {ex.Message}");
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void ClearTaskId()
    {
        taskId = string.Empty;
        task = null;
        hasSearched = false;
        hasInputError = false;
        finishedFingers.Clear();
        _fingerDto = new AddFingerDto();
        _motorId1 = string.Empty;
        _motorId2 = string.Empty;
        _motorId3 = string.Empty;

        // 如果当前用户信息存在，重新设置操作员ID
        if (currentUser != null)
        {
            _fingerDto.operator_id = currentUser.employee_id;
        }

        StateHasChanged();
    }

    private async Task LoadTaskDetail()
    {
        if (string.IsNullOrWhiteSpace(taskId))
        {
            hasInputError = true;
            return;
        }

        hasInputError = false;
        isLoading = true;

        try
        {
            hasSearched = true;
            task = await TaskService.GetTaskDetail(taskId);
            _fingerDto.task_id = taskId;
            await GetFinishedList();
        }
        catch (Exception ex)
        {
            task = null;
            await DialogService.ShowMessageBox("错误", $"任务加载失败：{ex.Message}", "确定");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GetFinishedList()
    {
        try
        {
            var result = await ProcessTwoService.GetFinishedList(taskId);
            finishedFingers = result;
        }
        catch (Exception ex)
        {
            finishedFingers = new List<FingerDto>();
            SnackbarHelper.Show(Snackbar, "加载失败", Severity.Error);
        }
    }

    private bool isBinding = false;

    private async Task HandleBinding()
    {
        if (string.IsNullOrWhiteSpace(_fingerDto.finger_id))
        {
            SnackbarHelper.Show(Snackbar, "请输入手指外壳编号", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_motorId1))
        {
            SnackbarHelper.Show(Snackbar, "请输入电机1编号", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_motorId2))
        {
            SnackbarHelper.Show(Snackbar, "请输入电机2编号", Severity.Warning);
            return;
        }

        isBinding = true;
        try
        {
            // 添加手指信息
            var response = await ProcessTwoService.AddFinger(_fingerDto);

            if (response.ResultCode != 1)
            {
                var errorMessage = response?.Msg ?? "绑定失败";
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            }

            // 绑定电机1
            ApiResponse response1 = await HandleMotorBindFinger(_motorId1, _fingerDto.finger_id);
            if (response1?.ResultCode != 1)
            {
                var errorMessage = response1?.Msg ?? "电机1绑定失败";
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
                return;
            }

            // 绑定电机2
            ApiResponse response2 = await HandleMotorBindFinger(_motorId2, _fingerDto.finger_id);
            if (response2?.ResultCode != 1)
            {
                var errorMessage = response2?.Msg ?? "电机2绑定失败";
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
                return;
            }

            // 如果电机3编号不为空，则绑定电机3
            if (!string.IsNullOrWhiteSpace(_motorId3))
            {
                ApiResponse response3 = await HandleMotorBindFinger(_motorId3, _fingerDto.finger_id);
                if (response3?.ResultCode != 1)
                {
                    var errorMessage = response3?.Msg ?? "电机3绑定失败";
                    SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
                    return;
                }
            }

            _fingerDto.finger_id = "";
            _motorId1 = "";
            _motorId2 = "";
            _motorId3 = "";
            _fingerDto.remarks = "";
        }
        catch (Exception ex)
        {
            _ = ex;
            SnackbarHelper.Show(Snackbar, "绑定失败", Severity.Error);
        }
        finally
        {
            isBinding = false;
            await LoadTaskDetail();
        }
    }

    private async Task<ApiResponse> HandleMotorBindFinger(string motor_id, string finger_id)
    {
        ApiResponse response = null;
        try
        {
            response = await ProcessTwoService.MotorBindFinger(motor_id, finger_id);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, $"电机{motor_id},绑定成功", Severity.Success);
            }
            else
            {
                var errorMessage = response?.Msg ?? $"电机{motor_id},绑定失败";
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _ = ex;
            SnackbarHelper.Show(Snackbar, $"电机{motor_id},绑定失败", Severity.Error);
        }

        return response;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(taskId) || task == null)
        {
            SnackbarHelper.Show(Snackbar, "请先查询并加载有效的任务数据", Severity.Warning);
            return;
        }

        try
        {
            var response = await TaskService.UpdateTaskProcessStatus(taskId, "process2", 1);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, "流程提交成功", Severity.Success);
                await LoadTaskDetail();
            }
            else
            {
                var errorMsg = response?.Msg ?? "提交失败，请重试";
                SnackbarHelper.Show(Snackbar, errorMsg, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            SnackbarHelper.Show(Snackbar, "系统异常，提交失败", Severity.Error);
        }
    }

}