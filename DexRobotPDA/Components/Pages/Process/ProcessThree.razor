@page "/process_3"
@inject TaskService TaskService
@inject ProcessThreeService ProcessThreeService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
<MudPaper Elevation="3" Class="pa-4 ma-2 mx-md-20 my-md-4">
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="taskId"
            Label="生产单号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入生产单号"
            Class="flex-1"/>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearTaskId"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            OnClick="LoadTaskDetail"
            Size="Size.Large"
            Disabled="isLoading"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>

    <MudDivider Class="my-4"/>
    <div class="min-vh-40 d-flex flex-column justify-center">
        @if (!hasSearched)
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                请输入生产单号并点击查询，加载任务详情
            </MudText>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            </div>
        }
        else if (task == null)
        {
            <div class="d-flex justify-content-center align-items-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Medium" Class="mr-3"/>
                <MudText Typo="Typo.body1" Color="Color.Error">
                    无法加载任务数据，请检查生产单号是否正确
                </MudText>
            </div>
        }
        else
        {
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudText Typo="Typo.h6">任务明细 - @taskId</MudText>
                            <MudSpacer/>
                            @if (task.status == 1)
                            {
                                <MudChip T="string" Color="Color.Info">进行中</MudChip>
                            }
                            else if (task.status == 2)
                            {
                                <MudChip T="string" Color="Color.Success">已完成</MudChip>
                            }
                            else if (task.status == 3)
                            {
                                <MudChip T="string" Color="Color.Error">已取消</MudChip>
                            }
                            else
                            {
                                <MudChip T="string">未开始</MudChip>
                            }
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <div  class="d-flex flex-column flex-md-row w-100">
                            <MudPaper Width="360px" Class="my-2 mx-1">
                                <MudList T="string">
                                    <MudListItem Text="@($"任务标题：{task.title ?? ""}")" Icon="@Icons.Material.Filled.Subtitles"/>
                                    <MudListItem Text="@($"任务描述：{task.description ?? ""}")" Icon="@Icons.Material.Filled.Dehaze"/>
                                    <MudListItem Text="@($"优先级：{(task.priority == 1 ? "低" : task.priority == 2 ? "中" : task.priority == 3 ? "高" : "")}")" Icon="@Icons.Material.Filled.PriorityHigh"/>
                                </MudList>
                            </MudPaper>
                            <MudPaper Width="360px" Class="my-2 mx-1">
                                <MudList T="string">
                                    <MudListItem Text="@($"负责人：{task.assignee_id ?? ""}")" Icon="@Icons.Material.Filled.ManageAccounts"/>
                                    <MudListItem Text="@($"创建日期：{task.created_at.ToString("yyyy-MM-dd HH:mm:ss") ?? ""}")" Icon="@Icons.Material.Filled.CalendarMonth"/>
                                    <MudListItem Text="@($"更新日期：{task.updated_at.ToString("yyyy-MM-dd HH:mm:ss") ?? ""}")" Icon="@Icons.Material.Filled.EditCalendar"/>
                                </MudList>
                            </MudPaper>
                        </div>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <MudDivider Class="my-4"/>
            <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
                <MudText Typo="Typo.h6">手指组装</MudText>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary">
                    查看明细
                </MudButton>
            </MudStack>

            <MudForm Model="@_PalmDto" @ref="form" Validation="@validation">
                <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                    <MudTextField
                        @bind-Value="_PalmDto.palm_id"
                        Label="手掌外壳编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_finger1"
                        Label="大拇指编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_finger2"
                        Label="食指编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_finger3"
                        Label="中指编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_finger4"
                        Label="无名指编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_finger5"
                        Label="小拇指编号"
                        Variant="Variant.Outlined"
                        Required="true"
                        Clearable="true"
                        Class="flex-1 mb-3"/>
                    <MudTextField
                        @bind-Value="_PalmDto.remarks"
                        Label="备注"
                        Variant="Variant.Outlined"
                        Class="flex-1 mb-3"/>
                </MudFocusTrap>
                <MudButton OnClick="HandleBinding" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary"
                           FullWidth="true" Disabled="@isBinding">
                    @if (isBinding)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ml-2">绑定中...</MudText>
                    }
                    else
                    {
                        <MudText>绑定</MudText>
                    }
                </MudButton>
            </MudForm>
        }
    </div>
</MudPaper>

@code {
    private string taskId = string.Empty;
    private ProductTaskDto? task = null;
    private bool isLoading = false;
    private bool hasSearched = false;
    private bool hasInputError = false;
    private UserDto? currentUser;
    private List<PalmDto> finishedPalms = new List<PalmDto>();
    private MudForm form;
    private bool validation = true;
    private AddPalmDto _PalmDto = new AddPalmDto();
    private string _finger1;
    private string _finger2;
    private string _finger3;
    private string _finger4;
    private string _finger5;
    private DotNetObjectReference<ProcessThree>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.initialize", dotNetRef);
            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                }
                else
                {
                    _PalmDto.operator_id = currentUser.employee_id;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"加载用户信息失败: {ex.Message}");
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void ClearTaskId()
    {
        taskId = string.Empty;
        task = null;
        hasSearched = false;
        hasInputError = false;
        finishedPalms.Clear();
        _PalmDto = new AddPalmDto();
        _finger1 = string.Empty;
        _finger2 = string.Empty;
        _finger3 = string.Empty;
        _finger4 = string.Empty;
        _finger5 = string.Empty;

        // 如果当前用户信息存在，重新设置操作员ID
        if (currentUser != null)
        {
            _PalmDto.operator_id = currentUser.employee_id;
        }

        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnEnterKeyPressed()
    {
        StateHasChanged();
        await Task.Delay(1);
        await LoadTaskDetail();
    }

    private async Task LoadTaskDetail()
    {
        if (string.IsNullOrWhiteSpace(taskId))
        {
            hasInputError = true;
            StateHasChanged();
            return;
        }

        hasInputError = false;
        isLoading = true;
        StateHasChanged();
        try
        {
            hasSearched = true;
            StateHasChanged();
            task = await TaskService.GetTaskDetail(taskId);
            _PalmDto.task_id = taskId;
            await GetFinishedList();
        }
        catch (Exception ex)
        {
            task = null;
            await DialogService.ShowMessageBox("错误", $"任务加载失败：{ex.Message}", "确定");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetFinishedList()
    {
        try
        {
            var result = await ProcessThreeService.GetPalmList(taskId);
            finishedPalms = result;
        }
        catch (Exception ex)
        {
            finishedPalms = new List<PalmDto>();
            Snackbar.Add("加载失败", Severity.Error);
        }
    }

    private bool isBinding = false;

    private async Task HandleBinding()
    {
        if (string.IsNullOrWhiteSpace(_PalmDto.palm_id))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_finger1))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_finger2))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_finger3))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_finger4))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_finger5))
        {
            SnackbarHelper.Show(Snackbar, "手掌外壳ID不能为空", Severity.Warning);
            return;
        }

        isBinding = true;

        try
        {
            var response = await ProcessThreeService.AddPalm(_PalmDto);

            if (response.ResultCode != 1)
            {
                var errorMessage = response?.Msg ?? "绑定失败";
                SnackbarHelper.Show(Snackbar, "手掌绑定失败" + errorMessage, Severity.Error);
            }

            // 绑定手指1
            ApiResponse response1 = await HandleFingerBindPalm(_finger1, _PalmDto.palm_id);
            if (response1?.ResultCode != 1)
            {
                return;
            }

            // 绑定手指2
            ApiResponse response2 = await HandleFingerBindPalm(_finger2, _PalmDto.palm_id);
            if (response2?.ResultCode != 1)
            {
                return;
            }

            // 绑定手指3
            ApiResponse response3 = await HandleFingerBindPalm(_finger3, _PalmDto.palm_id);
            if (response3?.ResultCode != 1)
            {
                return;
            }

            // 绑定手指4
            ApiResponse response4 = await HandleFingerBindPalm(_finger4, _PalmDto.palm_id);
            if (response4?.ResultCode != 1)
            {
                return;
            }

            // 绑定手指5
            ApiResponse response5 = await HandleFingerBindPalm(_finger5, _PalmDto.palm_id);
            if (response5?.ResultCode != 1)
            {
                return;
            }

            _PalmDto.palm_id = "";
            _PalmDto.remarks = "";
            _finger1 = "";
            _finger2 = "";
            _finger3 = "";
            _finger4 = "";
            _finger5 = "";
            await LoadTaskDetail();
        }
        catch (Exception ex)
        {
            _ = ex;
            SnackbarHelper.Show(Snackbar, "绑定失败", Severity.Error);
        }
        finally
        {
            isBinding = false;
        }
    }

    private async Task<ApiResponse> HandleFingerBindPalm(string finger_id, string palm_id)
    {
        ApiResponse response = null;
        try
        {
            response = await ProcessThreeService.FingerBindPalm(finger_id, palm_id);
            if (response != null && response.ResultCode == 1)
            {
                SnackbarHelper.Show(Snackbar, $"手指{finger_id},绑定成功", Severity.Success);
            }
            else
            {
                var errorMessage = $"手指{finger_id},绑定失败" + response?.Msg;
                SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // 正确处理异常信息
            var errorMessage = $"手指{finger_id}绑定异常: {ex.Message}";
            SnackbarHelper.Show(Snackbar, errorMessage, Severity.Error);

            // 创建一个表示错误的响应对象
            response = new ApiResponse
            {
                ResultCode = -1,
                Msg = errorMessage
            };
        }

        return response;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(taskId) || task == null)
        {
            Snackbar.Add("请先查询并加载有效的任务数据", Severity.Warning, config =>
            {
                config.ShowCloseIcon = true;
                config.VisibleStateDuration = 3000;
            });
            return;
        }

        try
        {
            var response = await TaskService.UpdateTaskProcessStatus(taskId, "process3", 1);

            if (response != null && response.ResultCode == 1)
            {
                Snackbar.Add("流程提交成功", Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 2000;
                });
            }
            else
            {
                var errorMsg = response?.Msg ?? "提交失败，请重试";
                Snackbar.Add(errorMsg, Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 3000;
                });
            }

            var response2 = await TaskService.UpdateTaskStatus(taskId, 2);
            if (response2 != null && response2.ResultCode == 1)
            {
                Snackbar.Add("任务状态更新成功", Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 2000;
                });
            }
            else
            {
                var errorMsg = response2?.Msg ?? "任务状态更新失败";
                Snackbar.Add(errorMsg, Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 3000;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("系统异常，提交失败", Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.VisibleStateDuration = 3000;
            });
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.dispose");
            dotNetRef.Dispose();
        }

        GC.SuppressFinalize(this);
    }

}