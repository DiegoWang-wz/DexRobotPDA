@page "/Detect1"
@implements IAsyncDisposable
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Dynamic

<MudPaper Elevation="3" MaxWidth="1000px" Class="pa-4 ma-2 mx-auto">
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    }
    else if (_detectDto?.id > 0)
    {
        <MudGrid Spacing="4">
            <MudItem xs="12" sm="8">
                <MudPaper Class="pa-4">
                    <MudForm @ref="form" @bind-Errors="@errors" Model="@_detectDto">
                        <MudTextField Class="my-2" Label="检测编号"
                                      Disabled="true"
                                      @bind-Value="_detectDto.id"/>

                        <MudTextField Class="my-2" Label="电机编号"
                                      Disabled="true"
                                      @bind-Value="_detectDto.motor_id"
                                      RequiredError="请输入电机编号"/>

                        <MudNumericField T="double?" Label="施加的力"
                                         Required="true"
                                         RequiredError="请输入施加的力"
                                         @bind-Value="_detectDto.force"/>

                        <MudTextField Class="my-2" T="double?" Label="测试前的距离"
                                      @bind-Value="_detectDto.distance_before"
                                      OnBlur="CalculateDistanceResult"
                                      Required="true"
                                      RequiredError="请输入测试前的距离"/>

                        <MudTextField Class="my-2" T="double?" Label="测试后的距离"
                                      @bind-Value="_detectDto.distance_after"
                                      OnBlur="CalculateDistanceResult"
                                      Required="true"
                                      RequiredError="请输入测试后的距离"/>

                        <MudTextField Class="my-2" T="double?" Label="距离差"
                                      @bind-Value="_detectDto.distance_result"
                                      Disabled="true"
                                      Required="true"
                                      RequiredError="请输入距离差"/>

                        <MudDatePicker T="DateTime?"
                                       Label="粘合时间"
                                       Disabled="true"
                                       @bind-Date="_detectDto.combine_time"
                                       DateFormat="yyyy-MM-dd HH:mm:ss"
                                       Adornment="Adornment.End"
                                       AdornmentIcon="@Icons.Material.Filled.Event"
                                       Class="my-2"/>

                        <MudDatePicker T="DateTime?"
                                       Label="使用时间"
                                       Disabled="true"
                                       @bind-Date="_detectDto.using_time"
                                       DateFormat="yyyy-MM-dd HH:mm:ss"
                                       Adornment="Adornment.End"
                                       AdornmentIcon="@Icons.Material.Filled.Event"
                                       Class="my-2"/>

                        <MudTextField Class="my-2" T="double?" Label="已过去的小时" Disabled="true"
                                      @bind-Value="_timeDiffHours"
                                      RequiredError="请输入距离差"/>

                        @* <div class="d-flex align-center justify-space-between"> *@
                        @*     <MudDatePicker T="DateTime?" *@
                        @*                    Label="使用时间" *@
                        @*                    Disabled="true" *@
                        @*                    @bind-Date="_detectDto.using_time" *@
                        @*                    DateFormat="yyyy-MM-dd HH:mm:ss" *@
                        @*                    Adornment="Adornment.End" *@
                        @*                    AdornmentIcon="@Icons.Material.Filled.Event" *@
                        @*                    Class="my-2"/> *@
                        @*     <MudButton Variant="Variant.Filled" Class="mx-2">获取当前时间</MudButton> *@
                        @* </div> *@
                        @* <MudTextField Class="my-2" T="string?" Label="备注" *@
                        @*               @bind-Value="_detectDto.remarks"/> *@

                        <div class="d-flex">
                            <MudRadioGroup @bind-Value="_detectDto.if_qualified">
                                <MudRadio Value="true" Color="Color.Success" Dense="true">合格</MudRadio>
                                <MudRadio Value="false" Color="Color.Secondary" Dense="false">不合格</MudRadio>
                            </MudRadioGroup>
                        </div>

                        <div class="d-flex align-center justify-space-between">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="HandleSubmit"
                                       Disabled="@(!CanSubmit)"
                                       Class="ml-auto">
                                提交检测结果
                            </MudButton>
                        </div>
                        @* <MudText Typo="Typo.body2" Color="Color.Primary"> *@
                        @*     当前选择状态: @(_detectDto.if_qualified.ToString() ?? "未选择") *@
                        @* </MudText> *@
                    </MudForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                    @foreach (var error in errors)
                    {
                        <MudText Color="@Color.Error">@error</MudText>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
    else if (hasSearched)
    {
        <MudText Align="Align.Center" Color="Color.Warning">
            未查询到相关数据
        </MudText>
    }
    <MudDivider Class="my-4"/>
    <MudStack Row="true" Spacing="4" Class="d-flex align-center py-2">
        <MudTextField
            @bind-Value="motor_id"
            Label="电机编号"
            Variant="Variant.Outlined"
            Required="true"
            Clearable="true"
            Error="@hasInputError"
            ErrorText="请输入电机编号"
            AutoFocus="true"
            Id="taskId"
            @onblur="() => GetMotorWormDetect()"
            Class="flex-1"/>

        <MudButton
            Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.DeleteForever"
            OnClick="ClearTaskId"
            Size="Size.Large"
            Class="w-full md:w-auto">
            清除
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Search"
            OnClick="GetMotorWormDetect"
            Size="Size.Large"
            Disabled="isLoading"
            Class="w-full md:w-auto">
            @(isLoading ? "查询中..." : "查询")
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private string motor_id = string.Empty;
    private bool isLoading = false;
    private bool hasInputError = false;
    private bool hasSearched = false;
    private UserDto? currentUser;
    private DotNetObjectReference<Detect1>? dotNetRef;
    private MotorWormDetectDto _detectDto = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.initialize", dotNetRef);
            try
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                StateHasChanged();
                if (currentUser == null)
                {
                    NavManager.NavigateTo("/login", true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"加载用户信息失败: {ex.Message}");
                NavManager.NavigateTo("/login", true);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void ClearTaskId()
    {
        motor_id = string.Empty;
        hasSearched = false;
        hasInputError = false;
        _detectDto = new MotorWormDetectDto();

        if (currentUser != null)
        {
            _detectDto.inspector_id = currentUser.employee_id;
        }

        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnEnterKeyPressed()
    {
        StateHasChanged();
        await Task.Delay(1);
        await GetMotorWormDetect();
    }

    private async Task GetMotorWormDetect()
    {
        if (string.IsNullOrWhiteSpace(motor_id))
        {
            hasInputError = true;
            StateHasChanged();
            return;
        }

        hasInputError = false;
        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await DetectService.GetMotorWormDetect(motor_id);
            _detectDto = result;
            if (_detectDto.using_time == null || _detectDto.using_time == DateTime.MinValue)
            {
                _detectDto.using_time = DateTime.Now;
            }

            _detectDto.force = 500.00;
            _detectDto.inspector_id = currentUser?.employee_id;
            CalculateDistanceResult();
            CalculateTimeDiff();
            hasSearched = true;
        }
        catch (Exception ex)
        {
            _detectDto = new MotorWormDetectDto();
            SnackbarHelper.Show(Snackbar, "加载失败", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            await JSRuntime.InvokeVoidAsync("enterKeyHandler.dispose");
            dotNetRef.Dispose();
        }

        GC.SuppressFinalize(this);
    }

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private bool CanSubmit => CheckRequiredFields();

    private bool CheckRequiredFields()
    {
        // 只检查数值字段是否填写，不检查单选按钮
        return _detectDto.distance_before.HasValue &&
               _detectDto.force.HasValue &&
               _detectDto.distance_after.HasValue &&
               _detectDto.distance_result.HasValue;
    }

    private void CalculateDistanceResult()
    {
        if (_detectDto.distance_before.HasValue && _detectDto.distance_after.HasValue)
        {
            _detectDto.distance_result = Math.Round(
                _detectDto.distance_before.Value - _detectDto.distance_after.Value,
                2
            );
            StateHasChanged();
        }
    }

    private double? _timeDiffHours;

    private void CalculateTimeDiff()
    {
        // 仅当两个时间都不为空时计算
        if (_detectDto.combine_time.HasValue && _detectDto.using_time.HasValue)
        {
            // 计算时间差（注意：使用时间不能早于粘结时间，需处理异常情况）
            TimeSpan timeDiff = _detectDto.using_time.Value - _detectDto.combine_time.Value;

            if (timeDiff.TotalHours >= 0)
            {
                _timeDiffHours = Math.Round(timeDiff.TotalHours, 1); // 保留1位小数，更易读
            }
            else
            {
                _timeDiffHours = null; // 使用时间早于粘结时间时，显示空值
                Snackbar.Add("使用时间不能早于粘结时间", Severity.Warning);
            }
        }
        else
        {
            _timeDiffHours = null; // 任一时间为空时，清空小时差
        }
    }

    private bool isSubmitting = false;

    private async Task HandleSubmit()
    {
        CalculateDistanceResult();

        // 先输出表单验证状态
        Console.WriteLine($"表单验证状态: {form.IsValid}");
        Console.WriteLine($"错误数量: {errors.Length}");

        if (errors.Length > 0)
        {
            Console.WriteLine("表单错误详情:");
            foreach (var error in errors)
            {
                Console.WriteLine($"- {error}");
            }
        }

        if (form.IsValid)
        {
            try
            {
                isSubmitting = true;
                // 检查DTO是否完整
                if (string.IsNullOrEmpty(_detectDto.motor_id))
                {
                    Snackbar.Add("电机编号不能为空", Severity.Error);
                    return;
                }

                if (string.IsNullOrEmpty(_detectDto.inspector_id))
                {
                    Snackbar.Add("检测员信息缺失，请重新登录", Severity.Error);
                    return;
                }

                var response = await DetectService.UpdateDetect1(_detectDto);

                Console.WriteLine($"API 响应结果: ResultCode = {response?.ResultCode}, Msg = {response?.Msg}");

                if (response?.ResultCode == 1)
                {
                    Snackbar.Add("提交成功", Severity.Success);
                    
                    try
                    {
                        var updateQualifyDto = new UpdateQualifyDto
                        {
                            id = _detectDto.motor_id,
                            qualified = true
                        };

                        var response2 = await DetectService.UpdateMotorQualify(updateQualifyDto);
                        if (response2?.ResultCode == 1)
                        {
                            Snackbar.Add($"更新{_detectDto.motor_id}的状态成功", Severity.Success);
                        }else
                        {
                            Snackbar.Add($"更新失败：{response2?.Msg}", Severity.Error);
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"提交异常: {ex.Message}");
                        Console.WriteLine($"异常堆栈: {ex.StackTrace}");
                        Snackbar.Add($"提交异常：{ex.Message}", Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"提交失败：{response?.Msg}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"提交异常: {ex.Message}");
                Console.WriteLine($"异常堆栈: {ex.StackTrace}");
                Snackbar.Add($"提交异常：{ex.Message}", Severity.Error);
            }
            finally
            {
                isSubmitting = false;
            }
        }
        else
        {
            Console.WriteLine("表单验证失败，存在以下错误:");
            foreach (var error in errors)
            {
                Console.WriteLine($"- {error}");
            }

            Snackbar.Add("表单存在错误，请检查后提交", Severity.Warning);
        }
    }

}
