@inject BarcodeScannerService ScannerService
@implements IAsyncDisposable

<MudGrid Spacing="1">
    @foreach (var input in Inputs)
    {
        @if (input.Visible)
        {
            <MudItem xs="12">
                <MudTextField T="string" 
                              @ref="input.FieldRef"
                              @bind-Value="input.Value"
                              Label="@input.Label"
                              Variant="Variant.Outlined"
                              Id="@input.Id"
                              FullWidth="true"
                              Clearable="true"
                              @onfocus="() => HandleInputFocus(input)"
                              @onblur="() => HandleInputBlur(input)"
                              @onkeyup="(e) => HandleInputKeyUp(input, e)"
                              Class="w-100"/>
            </MudItem>
        }
    }
</MudGrid>

<input
    @ref="_barcodeInput"
    style="position:absolute; left:-9999px; top:-9999px; opacity:0; pointer-events:none; outline:none;"
    @onfocusin="(e) => ScannerService.HandleInputFocus()"
    @onfocusout="(e) => ScannerService.HandleInputBlurAsync()"
/>

@code {
    [Parameter] public List<InputField> Inputs { get; set; } = new();
    [Parameter] public Func<string, InputField?>? DetermineTargetInput { get; set; }
    [Parameter] public EventCallback<InputField> OnInputValueChanged { get; set; }
    
    private ElementReference _barcodeInput;
    private bool _isProcessing = false; // 防止并发处理
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScannerService.InitializeAsync(_barcodeInput);
            ScannerService.OnBarcodeScanned += HandleBarcodeScanned;
        }
    }
    
    private void HandleInputFocus(InputField input)
    {
        ScannerService.SetCurrentFocusedInputId(input.Id);
        
        // 特殊输入框获得焦点时退出自动聚焦
        if (input.IsSpecialInput)
        {
            _ = ScannerService.ExitAutoFocusModeAsync();
        }
        // 其他输入框在自动模式下保持自动聚焦
        else if (ScannerService.IsAutoMode)
        {
            _ = ScannerService.EnterAutoFocusModeAsync();
        }
    }
    
    private async Task HandleInputBlur(InputField input)
    {
        // 特殊输入框失去焦点且在自动模式下，重新进入自动聚焦
        if (input.IsSpecialInput && ScannerService.IsAutoMode)
        {
            await ScannerService.EnterAutoFocusModeAsync();
        }
        await ScannerService.HandleInputBlurAsync();
    }
    
    private async Task ApplyManualFocus(int index)
    {
        var input = Inputs.FirstOrDefault(i => i.Index == index);
        if (input?.FieldRef != null)
        {
            await input.FieldRef.FocusAsync();
        }
    }
    
    // 处理条码扫描（添加防抖动和并发控制）
    private async void HandleBarcodeScanned(string barcodeData)
    {
        if (_isProcessing || string.IsNullOrWhiteSpace(barcodeData))
        {
            return;
        }
        else
        {
            SnackbarHelper.Show(Snackbar, $"扫描到条码: {barcodeData}", Severity.Success);
        }
        

        try
        {
            _isProcessing = true;
            
            // 自动模式处理
            if (ScannerService.IsAutoMode && DetermineTargetInput != null)
            {
                var targetInput = DetermineTargetInput(barcodeData);
                if (targetInput != null)
                {
                    // 仅在值发生变化时更新并触发重渲染
                    if (targetInput.Value != barcodeData)
                    {
                        await InvokeAsync(() =>
                        {
                            targetInput.Value = barcodeData;
                            StateHasChanged();
                        });
                        // 触发外部值变化回调
                        await OnInputValueChanged.InvokeAsync(targetInput);
                    }

                    // 聚焦下一个输入框（优化：增加延迟减少闪烁）
                    if (targetInput.FieldRef != null)
                    {
                        await Task.Delay(80); // 增加延迟以减少视觉闪烁
                        await targetInput.FieldRef.FocusAsync();
                    }
                
                    await ScannerService.EnsureAutoFocusAsync();
                }
            }
            // 手动模式处理
            else
            {
                var currentInput = Inputs.FirstOrDefault(i => 
                    i.Index == ScannerService.GetManualFocusIndex() && i.Visible);
            
                if (currentInput != null)
                {
                    // 仅在值发生变化时更新
                    if (currentInput.Value != barcodeData)
                    {
                        await InvokeAsync(() =>
                        {
                            currentInput.Value = barcodeData;
                            StateHasChanged();
                        });
                        await OnInputValueChanged.InvokeAsync(currentInput);
                    }

                    // 手动模式保持当前输入框聚焦
                    if (currentInput.FieldRef != null)
                    {
                        await Task.Delay(80);
                        await currentInput.FieldRef.FocusAsync();
                    }
                }
            }
        }
        finally
        {
            _isProcessing = false;
        }
    }

    
    private async Task HandleInputKeyUp(InputField input, KeyboardEventArgs e)
    {
        await OnInputValueChanged.InvokeAsync(input);
    
        // 支持按Enter键移动到下一个输入框
        if (e.Key == "Enter" && !input.IsSpecialInput)
        {
            var nextIndex = input.Index + 1;
            // 查找下一个可见输入框
            var nextInput = Inputs.FirstOrDefault(i => 
                i.Index == nextIndex && i.Visible && !i.IsSpecialInput);
            if (nextInput?.FieldRef != null)
            {
                await Task.Delay(50);
                await nextInput.FieldRef.FocusAsync();
                
                // 手动模式下更新当前聚焦索引
                if (!ScannerService.IsAutoMode)
                {
                    ScannerService.SetManualFocusIndex(nextIndex);
                }
            }
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        ScannerService.OnBarcodeScanned -= HandleBarcodeScanned;
        await ScannerService.DisposeAsync();
    }
    
    // 输入框信息模型
    public class InputField
    {
        public int Index { get; set; }
        public string Label { get; set; } = string.Empty;
        public string Id { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public bool IsSpecialInput { get; set; } = false;
        public MudTextField<string>? FieldRef { get; set; }
        public bool Visible { get; set; } = true;
    }
}
